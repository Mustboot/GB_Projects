#! /usr/bin/python3

# Создать вручную список, содержащий цены на товары (10–20 товаров), например:
# [57.8, 46.51, 97, ...]
#
# Вывести на экран эти цены через запятую в одну строку,
# цена должна отображаться в виде <r> руб <kk> коп (например «5 руб 04 коп»).
# Подумать, как из цены получить рубли и копейки, как добавить нули, если,
# например, получилось 7 копеек или 0 копеек (должно быть 07 коп или 00 коп).
# Вывести цены, отсортированные по возрастанию, новый список не создавать
# (доказать, что объект списка после сортировки остался тот же).
# Создать новый список, содержащий те же цены, но отсортированные по убыванию.
# Вывести цены пяти самых дорогих товаров.
# Сможете ли вывести цены этих товаров по возрастанию, написав минимум кода?

import random

# Создаем список, содержащий цены на товары (10–20 товаров)
price_list = [element / 100 for element in random.sample(range(10, 10000), 10)]
# добавляем нулевой элемент для проверки
price_list.append(0)

print(price_list, end='\n\n')

# Выводим цены через запятую в одну строку, в виде <r> руб <kk> коп (например «5 руб 04 коп»):
for element in price_list:
    print(f'{int(element // 1)} руб {int(element % 1 * 100)} коп.', end=', ')

print('', end='\n')

# Тоже самое, но добавляем нули, если, например, получилось 7 копеек или 0 копеек (должно быть 07 коп или 00 коп):
for element in price_list:
    print(f'{int(element // 1)} руб {int(element % 1 * 100):02d} коп.', end=', ')

print('\n')

print(f'{sorted(price_list)} id:{id(price_list)} - цены, отсортированные по возрастанию, не создавая новый список')
print(f'{price_list} id:{id(price_list)} - доказательство, что объект списка после сортировки остался тот же', end='\n\n')

# Создаем новый список, содержащий те же цены, но отсортированные по убыванию.
price_list_2 = price_list.copy()
price_list_2.sort(reverse=True)
print(price_list_2, end='\n\n')

# Выводим цены пяти самых дорогих товаров по возрастанию, написав минимум кода...
print(sorted(price_list)[-5:])
